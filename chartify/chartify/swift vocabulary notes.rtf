{\rtf1\ansi\ansicpg1252\cocoartf2580
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica-Bold;\f1\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww38200\viewh18280\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b\fs36 \cf0 Swift Notes
\fs24 \
https://docs.swift.org/swift-book/LanguageGuide/AccessControl.html\
\

\f1\b0 Module - is a single unit of code distribution\'97a framework or application that\'92s built and shipped as a single unit and that can be imported by another module with Swift\'92s import keyword.\
\
source file - is a single Swift source code file within a module (in effect, a single file within an app or framework). Although it\'92s common to define individual types in separate source files, a single source file can contain definitions for multiple types, functions, and so on.\
\
Bundle -  A representation of the code and resources stored in a bundle directory on disk.\
\
\
Packages - namespace that organizes a set of related classes and interfaces.  Swift packages are reusable components of Swift, Objective-C, Objective-C++, C, or C++ code that developers can use in their projects. They bundle source files, binaries, and resources in a way that's easy to use in your app's project.\
\
Library package - A library package contains code which other packages can use and depend online \
\
Entry point - an entry point is a point in a program where the execution of a program begins, and where the program has access to command line arguments. \
\
Target (class) - the basic building block of a Swift package. Each target contains a set of source files that Xcode compiles into a module or test suite. You can vend targets to other packages by defining products that include the targets. \
\
Framework - Frameworks are self-contained, reusable chunks of code and resources you can import into many apps.\
\
QUESTIONS: why is it a problem if both thingies have a \'93main\'94?\
\
Why is there .h and .m file\
\
\
.h files - A header file is a file with extension .h which contains C function declarations and macro definitions to be shared between several source files.\
\
.m files - An M file is a class implementation file used by programs written in Objective-C. It begins with the @implementation directive and initializes variables and functions that can be referenced by other Objective-C source files. M files may also reference header (.H) files.\
\
Objective-C is a programming language slightly modified from C. Objective-C source code 'implementation' program files usually have .m filename extensions, while Objective-C 'header/interface' files have .h extensions, the same as C header files. Objective-C++ files are denoted with a .mm file extension.\
\
Swift is newer, since 2014, works with Objective-C\
\
Cocoa is the API for desktop stuff. Cocoa Touch is the Api for mobile stuff.\
XCTest Framework - XCTest framework to write unit tests for your Xcode projects that integrate seamlessly with Xcode's testing workflow.\
\
Routine - In computer programming, routine and subroutine are general and nearly synonymous terms for any sequence of code that is intended to be called and used repeatedly during the executable of a program\
\
Main - the entry point.\
\

\f0\b Import Foundation - 
\f1\b0 The Foundation framework provides a base layer of functionality for apps and frameworks, including data storage and persistence, text processing, date and time calculations, sorting and filtering, and networking.\
\
CLI/Swift Answers:\
Setting an additional target (framework) - https://developer.apple.com/forums/thread/52211\
Most recent answer for a workaround - https://forums.swift.org/t/command-line-tool-target-cannot-have-a-unit-testing-bundle/45596\
\
\
\
}